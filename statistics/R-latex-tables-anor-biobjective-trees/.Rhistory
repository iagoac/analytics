cat(n)
cat(" -- ")
cat(length(which(exact$name==n)))
cat("\n")
}
for (n in unique(as.list(exact$name))) {
cat(sprintf("%s -- ", n))
cat(length(which(exact$name==n)))
cat("\n")
}
for (n in unique(as.list(exact$name))) {
cat(sprintf("%s -- ", n))
cat(length(which(exact$name==n && size == 25)))
cat("\n")
}
for (n in unique(as.list(exact$name))) {
cat(sprintf("%s -- ", n))
cat(length(which(exact$name==n & size == 25)))
cat("\n")
}
View(exact)
for (size in unique(as.list(exact$name))) {
cat(sprintf("%s -- ", size))
cat(length(which(exact$name==size & n == 25)))
cat("\n")
}
cat(length(which(exact$name==size && n == 25)))
for (size in unique(as.list(exact$name))) {
cat(sprintf("%s -- ", size))
cat(length(which(exact$name==size && n == 25)))
cat("\n")
}
which()
help(which)
for (size in unique(as.list(exact$name))) {
cat(sprintf("%s -- ", size))
cat(length(subset(exact, name == size & n == 25)))
cat("\n")
}
for (size in unique(as.list(exact$name))) {
cat(sprintf("%s -- ", size))
cat(length(subset(exact, name == size & n == 25)))
cat(length(subset(exact, name == size & n == 50)))
cat("\n")
}
for (size in unique(as.list(exact$name))) {
cat(sprintf("%s -- ", size))
cat(length(subset(exact, name == size & n == 25)))
cat(" -- ")
cat(length(subset(exact, name == size & n == 50)))
cat("\n")
}
View(exact)
vrp <- read.csv("vrp.csv", header = TRUE, sep = ",")
exact <- subset(vrp, type == 1)
for (size in unique(as.list(exact$name))) {
cat(sprintf("%s -- ", size))
cat(length(subset(exact, name == size & n == 25)))
cat(" -- ")
cat(length(subset(exact, name == size & n == 50)))
cat("\n")
}
for (nam in unique(as.list(exact$name))) {
cat(sprintf("%s -- ", nam))
cat(length(subset(exact, name == nam & n == 25)))
cat(" -- ")
cat(length(subset(exact, name == nam & n == 50)))
cat("\n")
}
vrp <- read.csv("vrp.csv", header = TRUE, sep = ",")
exact <- subset(vrp, type == 1)
for (nam in unique(as.list(exact$name))) {
cat(sprintf("%s -- ", nam))
cat(length(subset(exact, name == nam & n == 25)))
cat(" -- ")
cat(length(subset(exact, name == nam & n == 50)))
cat("\n")
}
for (nam in unique(as.list(exact$name))) {
cat(sprintf("%s -- ", nam))
cat(length(subset(exact, name == nam)))
cat(" -- ")
cat(length(subset(exact, name == nam & n == 50)))
cat("\n")
}
for (nam in unique(as.list(exact$name))) {
cat(sprintf("%s -- ", nam))
cat(length(subset(exact)))
cat(" -- ")
cat(length(subset(exact, name == nam & n == 50)))
cat("\n")
}
a <- subset(exact, name == nam)
lenght(a)
length(a)
nrows(a)
nrow(a)
for (nam in unique(as.list(exact$name))) {
cat(sprintf("%s -- ", nam))
cat(nrow(subset(exact, name == nam)))
cat(" -- ")
cat(length(subset(exact, name == nam & n == 50)))
cat("\n")
}
for (nam in unique(as.list(exact$name))) {
cat(sprintf("%s -- ", nam))
cat(nrow(subset(exact, name == nam & n == 25)))
cat(" -- ")
cat(nrow(subset(exact, name == nam & n == 50)))
cat("\n")
}
vrp <- read.csv("vrp.csv", header = TRUE, sep = ",")
exact <- subset(vrp, type == 1)
for (nam in unique(as.list(exact$name))) {
cat(sprintf("%s -- ", nam))
cat(nrow(subset(exact, name == nam & n == 25)))
cat(" -- ")
cat(nrow(subset(exact, name == nam & n == 50)))
cat("\n")
}
vrp <- read.csv("vrp.csv", header = TRUE, sep = ",")
for (nam in unique(as.list(exact$name))) {
cat(sprintf("%s -- ", nam))
cat(nrow(subset(exact, name == nam & n == 25)))
cat(" -- ")
cat(nrow(subset(exact, name == nam & n == 50)))
cat("\n")
}
vrp <- read.csv("vrp.csv", header = TRUE, sep = ",")
exact <- subset(vrp, type == 1)
for (nam in unique(as.list(exact$name))) {
cat(sprintf("%s -- ", nam))
cat(nrow(subset(exact, name == nam & n == 25)))
cat(" -- ")
cat(nrow(subset(exact, name == nam & n == 50)))
cat("\n")
}
setwd("~")
vrp <- read.csv("vrp.csv", header = TRUE, sep = ",")
exact <- subset(vrp, type == 1)
for (nam in unique(as.list(exact$name))) {
cat(sprintf("%s -- ", nam))
cat(nrow(subset(exact, name == nam & n == 25)))
cat(" -- ")
cat(nrow(subset(exact, name == nam & n == 50)))
cat("\n")
}
setwd("C:/github")
setwd("C:/github/PreprocessingAlgorithms")
setwd("C:/github/PreprocessingAlgorithms/src")
setwd("C:/github/PreprocessingAlgorithms/")
source("src/PARdelta.R")
source("src/bilex.R")
source("src/PARdelta.R")
source("src/bilex.R")
source("src/Utils.R")
library(muStat)
library(Skillings.Mack)
library(data.table)
library(mjcbase)
results = read.csv(file = "data/results_60_correct.csv", header = TRUE, sep = ",")
results = data.frame(results)
algo_names = c("s0","s1","s2","s3","s4")
instance_names = results$instance[1:245]
# fix negative gap
results$gap = dualityGap(results$primal, results$dual)
n_algos = 5
TM = convertToRuntimeMatrix(df = results, n_algos, algo_names, instance_names)
GM = convertToGapMatrix(df = results, n_algos, algo_names, instance_names)
SM = convertToStatusMatrix(df = results, n_algos, algo_names, instance_names)
remove(results,algo_names, instance_names)
# remove null values
vec <- c()
for (i in 1:nrow(TM)) {
if (all(is.na(TM[i,]))) {
vec <- c(vec, i)
}
}
TM <- TM[-vec,]
GM <- GM[-vec,]
SM = SM[-vec,]
remove(vec)
## TESTE 2
not_missing_idx = vector()
missing_idx = vector()
for (r in 1:nrow(TM)) {
if (anyNA(TM[r,])) {
missing_idx = c(missing_idx, r)
}
else {
not_missing_idx = c(not_missing_idx, r)
}
}
missing_matrix = TM[missing_idx,]
not_missing_matrix = TM[not_missing_idx,]
help(rbind)
help("sample")
help(runif)
setwd("~")
exact <- read.csv("vrp.csv", header = TRUE, sep = ",")
View(exact)
C <- exact[1:40,]
View(C)
C  <- exact[1:40,]
R  <- exact[41:80,]
RC <- exact[81:120,]
# Tabela do C
for (size in unique(as.list(exact$n))) {
for (uncertain in unique(as.list(exact$I))) {
sub <- subset(C, n == size && I == uncertain)
}
}
exact$I
# Tabela do C
for (size in unique(as.list(exact$n))) {
for (uncertain in unique(as.list(exact$I))) {
sub <- subset(C, n == size)
}
}
sub <- subset(C, n == size & I == uncertain)
# Tabela do C
for (size in unique(as.list(exact$n))) {
for (uncertain in unique(as.list(exact$I))) {
sub <- subset(C, n == size & I == uncertain)
}
}
exact <- read.csv("vrp.csv", header = TRUE, sep = ",")
C  <- exact[1:40,]
R  <- exact[41:80,]
RC <- exact[81:120,]
exact <- read.csv("vrp.csv", header = TRUE, sep = ",")
C  <- exact[1:40,]
R  <- exact[41:80,]
RC <- exact[81:120,]
sink("results-c.tex", append = FALSE)
cat("\\begin{table}[!t] \n")
cat("\\caption{Resultados do L-Shaped Method para as instâncias C}\n")
cat("\\label{table:resultadosz_c} \n")
cat("\\centering \n")
cat("\\begin{tabular}{\n  c\n  c\n  c\n  c\n  c\n  c\n  c\n  c}\n")
cat("\\toprule \n")
cat("$|V'|$ & $|I|$ & Inteiro & Ótimo & \\mc{gap (\%)} & \\mc{# cortes} & \\mc{$t_1$ (s) & \\mc{$t_2$ (s)} \\\\ \\midrule \n")
sink()
sink("results-c.tex", append = FALSE)
cat("\\begin{table}[!t] \n")
cat("\\caption{Resultados do L-Shaped Method para as instâncias C}\n")
cat("\\label{table:resultadosz_c} \n")
cat("\\centering \n")
cat("\\begin{tabular}{\n  c\n  c\n  c\n  c\n  c\n  c\n  c\n  c}\n")
cat("\\toprule \n")
cat("$|V'|$ & $|I|$ & Inteiro & Ótimo & \\mc{gap (%)} & \\mc{# cortes} & \\mc{$t_1$ (s) & \\mc{$t_2$ (s)} \\\\ \\midrule \n")
for (size in unique(as.list(exact$n))) {
for (uncertain in unique(as.list(exact$I))) {
sub <- subset(C, n == size & I == uncertain)
cat(sprintf("\\multirow{4}{*}{\\textsc{%s}} & %d & %d & %.1f(%.0f)  & %d & %.1f(%.0f) \\\\ \n",
size,
uncertain,
length(which(sub$gap < 100)),
length(which(sub$gap == 0)),
mean(sub$gap),
10*sd(sub$gap),
mean(sub$nCuts),
10*sd(sub$nCuts),
mean(sub$time1),
10*sd(sub$time1),
mean(sub$time2),
10*sd(sub$time2)))
}
cat("\\midrule \n")
}
sink()
sink("results-c.tex", append = FALSE)
cat("\\begin{table}[!t] \n")
cat("\\caption{Resultados do L-Shaped Method para as instâncias C}\n")
cat("\\label{table:resultadosz_c} \n")
cat("\\centering \n")
cat("\\begin{tabular}{\n  c\n  c\n  c\n  c\n  c\n  c\n  c\n  c}\n")
cat("\\toprule \n")
cat("$|V'|$ & $|I|$ & Inteiro & Ótimo & \\mc{gap (%)} & \\mc{# cortes} & \\mc{$t_1$ (s) & \\mc{$t_2$ (s)} \\\\ \\midrule \n")
for (size in unique(as.list(exact$n))) {
for (uncertain in unique(as.list(exact$I))) {
sub <- subset(C, n == size & I == uncertain)
cat(sprintf("\\multirow{4}{*}{\\textsc{%s}} & %d & %d & %.1f(%.0f)  & %d & %.1f(%.0f) \\\\ \n",
size,
uncertain,
length(which(sub$GAP < 100)),
length(which(sub$GAP == 0)),
mean(sub$GAP),
10*sd(sub$GAP),
mean(sub$nCuts),
10*sd(sub$nCuts),
mean(sub$time1),
10*sd(sub$time1),
mean(sub$time2),
10*sd(sub$time2)))
}
cat("\\midrule \n")
}
cat("\\bottomrule \n")
cat("\\end{tabular} \n")
cat("\\end{table} \n")
sink()
sink("results-c.tex", append = FALSE)
cat("\\begin{table}[!t] \n")
cat("\\caption{Resultados do L-Shaped Method para as instâncias C}\n")
cat("\\label{table:resultadosz_c} \n")
cat("\\centering \n")
cat("\\begin{tabular}{\n  c % |V'|\n  c % |I|\n  c\n  c\n  c\n  c\n  c\n  c}\n")
cat("\\toprule \n")
cat("$|V'|$ & $|I|$ & Inteiro & Ótimo & \\mc{gap (%)} & \\mc{# cortes} & \\mc{$t_1$ (s) & \\mc{$t_2$ (s)} \\\\ \\midrule \n")
for (size in unique(as.list(exact$n))) {
for (uncertain in unique(as.list(exact$I))) {
sub <- subset(C, n == size & I == uncertain)
cat(sprintf("\\multirow{4}{*}{%d} & %d & %d & %d & %.1f(%.0f) & %.1f(%.0f) & %.1f(%.0f) & %.1f(%.0f) \\\\ \n",
size,
uncertain,
length(which(sub$GAP < 100)),
length(which(sub$GAP == 0)),
mean(sub$GAP),
10*sd(sub$GAP),
mean(sub$nCuts),
10*sd(sub$nCuts),
mean(sub$time1),
10*sd(sub$time1),
mean(sub$time2),
10*sd(sub$time2)))
}
cat("\\midrule \n")
}
cat("\\bottomrule \n")
cat("\\end{tabular} \n")
cat("\\end{table} \n")
sink()
# Tabela do R
sink("results-r.tex", append = FALSE)
cat("\\begin{table}[!t] \n")
cat("\\caption{Resultados do L-Shaped Method para as instâncias R}\n")
cat("\\label{table:resultados_R} \n")
cat("\\centering \n")
cat("\\begin{tabular}{\n  c % |V'|\n  c % |I|\n  c % inteiro\n  c % otimo\n  c\n  c\n  c\n  c\n}\n")
cat("\\toprule \n")
cat("$|V'|$ & $|I|$ & Inteiro & Ótimo & \\mc{gap (\\%)} & \\mc{# cortes} & \\mc{$t_1$} (s) & \\mc{$t_2$ (s)} \\\\ \\midrule \n")
for (size in unique(as.list(exact$n))) {
for (uncertain in unique(as.list(exact$I))) {
sub <- subset(R, n == size & I == uncertain)
cat(sprintf("\\multirow{4}{*}{%d} & %d & %d & %d & %.1f(%.0f) & %.1f(%.0f) & %.1f(%.0f) & %.1f(%.0f) \\\\ \n",
size,
uncertain,
length(which(sub$GAP < 100)),
length(which(sub$GAP == 0)),
mean(sub$GAP),
10*sd(sub$GAP),
mean(sub$nCuts),
10*sd(sub$nCuts),
mean(sub$time1),
10*sd(sub$time1),
mean(sub$time2),
10*sd(sub$time2)))
}
cat("\\midrule \n")
}
cat("\\bottomrule \n")
cat("\\end{tabular} \n")
cat("\\end{table} \n")
sink()
# Tabela do CR
sink("results-r.tex", append = FALSE)
cat("\\begin{table}[!t] \n")
cat("\\caption{Resultados do L-Shaped Method para as instâncias CR}\n")
cat("\\label{table:resultados_CR} \n")
cat("\\centering \n")
cat("\\begin{tabular}{\n  c % |V'|\n  c % |I|\n  c % inteiro\n  c % otimo\n  c\n  c\n  c\n  c\n}\n")
cat("\\toprule \n")
cat("$|V'|$ & $|I|$ & Inteiro & Ótimo & \\mc{gap (\\%)} & \\mc{# cortes} & \\mc{$t_1$} (s) & \\mc{$t_2$ (s)} \\\\ \\midrule \n")
for (size in unique(as.list(exact$n))) {
for (uncertain in unique(as.list(exact$I))) {
sub <- subset(CR, n == size & I == uncertain)
cat(sprintf("\\multirow{4}{*}{%d} & %d & %d & %d & %.1f(%.0f) & %.1f(%.0f) & %.1f(%.0f) & %.1f(%.0f) \\\\ \n",
size,
uncertain,
length(which(sub$GAP < 100)),
length(which(sub$GAP == 0)),
mean(sub$GAP),
10*sd(sub$GAP),
mean(sub$nCuts),
10*sd(sub$nCuts),
mean(sub$time1),
10*sd(sub$time1),
mean(sub$time2),
10*sd(sub$time2)))
}
cat("\\midrule \n")
}
cat("\\bottomrule \n")
cat("\\end{tabular} \n")
cat("\\end{table} \n")
sink()
# Tabela do R
sink("results-r.tex", append = FALSE)
cat("\\begin{table}[!t] \n")
cat("\\caption{Resultados do L-Shaped Method para as instâncias R}\n")
cat("\\label{table:resultados_R} \n")
cat("\\centering \n")
cat("\\begin{tabular}{\n  c % |V'|\n  c % |I|\n  c % inteiro\n  c % otimo\n  c\n  c\n  c\n  c\n}\n")
cat("\\toprule \n")
cat("$|V'|$ & $|I|$ & Inteiro & Ótimo & \\mc{gap (\\%)} & \\mc{# cortes} & \\mc{$t_1$} (s) & \\mc{$t_2$ (s)} \\\\ \\midrule \n")
for (size in unique(as.list(exact$n))) {
for (uncertain in unique(as.list(exact$I))) {
sub <- subset(R, n == size & I == uncertain)
cat(sprintf("\\multirow{4}{*}{%d} & %d & %d & %d & %.1f(%.0f) & %.1f(%.0f) & %.1f(%.0f) & %.1f(%.0f) \\\\ \n",
size,
uncertain,
length(which(sub$GAP < 100)),
length(which(sub$GAP == 0)),
mean(sub$GAP),
10*sd(sub$GAP),
mean(sub$nCuts),
10*sd(sub$nCuts),
mean(sub$time1),
10*sd(sub$time1),
mean(sub$time2),
10*sd(sub$time2)))
}
cat("\\midrule \n")
}
cat("\\bottomrule \n")
cat("\\end{tabular} \n")
cat("\\end{table} \n")
sink()
# Tabela do RC
sink("results-rc.tex", append = FALSE)
cat("\\begin{table}[!t] \n")
cat("\\caption{Resultados do L-Shaped Method para as instâncias RC}\n")
cat("\\label{table:resultados_rc} \n")
cat("\\centering \n")
cat("\\begin{tabular}{\n  c % |V'|\n  c % |I|\n  c % inteiro\n  c % otimo\n  c\n  c\n  c\n  c\n}\n")
cat("\\toprule \n")
cat("$|V'|$ & $|I|$ & Inteiro & Ótimo & \\mc{gap (\\%)} & \\mc{# cortes} & \\mc{$t_1$} (s) & \\mc{$t_2$ (s)} \\\\ \\midrule \n")
for (size in unique(as.list(exact$n))) {
for (uncertain in unique(as.list(exact$I))) {
sub <- subset(RC, n == size & I == uncertain)
cat(sprintf("\\multirow{4}{*}{%d} & %d & %d & %d & %.1f(%.0f) & %.1f(%.0f) & %.1f(%.0f) & %.1f(%.0f) \\\\ \n",
size,
uncertain,
length(which(sub$GAP < 100)),
length(which(sub$GAP == 0)),
mean(sub$GAP),
10*sd(sub$GAP),
mean(sub$nCuts),
10*sd(sub$nCuts),
mean(sub$time1),
10*sd(sub$time1),
mean(sub$time2),
10*sd(sub$time2)))
}
cat("\\midrule \n")
}
cat("\\bottomrule \n")
cat("\\end{tabular} \n")
cat("\\end{table} \n")
sink()
setwd("C:/github/analytics/statistics/R-latex-tables-anor-biobjective-trees")
hop1   <- read.csv("hop/cost/results.csv",    header = TRUE, sep = ",")
hop2   <- read.csv("hop/hop/results.csv",     header = TRUE, sep = ",")
delay1 <- read.csv("delay/cost/results.csv",  header = TRUE, sep = ",")
delay2 <- read.csv("delay/delay/results.csv", header = TRUE, sep = ",")
shapiro.test(delay1$time)
shapiro.test(delay1$time)
shapiro.test(delay2$time)
shapiro.test(hop1$time)
shapiro.test(hop2$time)
# normality tests
library("ggpubr")
ggdensity(delay1$time)
ggdensity(delay2$time)
ggdensity(hop2$time)
ggdensity(hop1$time)
ggqqplot(hop1$time)
ggqqplot(hop2$time)
ggqqplot(delay2$time)
ggqqplot(delay1$time)
library("car")
qqPlot(delay1$time)
qq.plot(delay1$time)
shapiro.test(delay1$time)
shapiro.test(delay2$time)
shapiro.test(hop1$time)
shapiro.test(hop2$time)
View(delay1)
View(delay2)
subset(delay1, type == "tc")
shapiro.test(subset(delay1, type == "tc")$time)
shapiro.test(subset(delay1, type == "tc")$time)
shapiro.test(subset(delay1, type == "te")$time)
shapiro.test(subset(delay2, type == "tc")$time)
shapiro.test(subset(delay2, type == "te")$time)
shapiro.test(subset(hop1,   type == "tc")$time)
shapiro.test(subset(hop1,   type == "te")$time)
shapiro.test(subset(hop2,   type == "tc")$time)
shapiro.test(subset(hop2,   type == "te")$time)
# paired wilcoxon's tests
wilcox.test(subset(delay1, type == "tc")$time, subset(delay2, type == "tc")$time, paired = TRUE, alternative = "two.sided")
# paired wilcoxon's tests
wilcox.test(subset(delay1, type == "te")$time, subset(delay2, type == "te")$time, paired = TRUE, alternative = "two.sided")
# paired wilcoxon's tests
wilcox.test(subset(hop1, type == "te")$time, subset(hop2, type == "te")$time, paired = TRUE, alternative = "two.sided")
wilcox.test(subset(hop1, type == "tc")$time, subset(hop2, type == "tc")$time, paired = TRUE, alternative = "two.sided")
# paired wilcoxon's tests
wilcox.test(subset(hop1, type == "tc")$time, subset(hop2, type == "tc")$time, paired = TRUE, alternative = "two.sided")
wilcox.test(subset(delay1, type == "tc")$time, subset(delay2, type == "tc")$time, paired = TRUE, alternative = "two.sided")
wilcox.test(subset(hop1, type == "te")$time, subset(hop2, type == "te")$time, paired = TRUE, alternative = "two.sided")
wilcox.test(subset(delay1, type == "te")$time, subset(delay2, type == "te")$time, paired = TRUE, alternative = "two.sided")
